<?php

/**
*
*  _     _  _______  ______    ___      ______   _______  __   __  _______  ______    ______  
* | | _ | ||       ||    _ |  |   |    |      | |       ||  | |  ||   _   ||    _ |  |      | 
* | || || ||   _   ||   | ||  |   |    |  _    ||    ___||  | |  ||  |_|  ||   | ||  |  _    |
* |       ||  | |  ||   |_||_ |   |    | | |   ||   | __ |  |_|  ||       ||   |_||_ | | |   |
* |       ||  |_|  ||    __  ||   |___ | |_|   ||   ||  ||       ||       ||    __  || |_|   |
* |   _   ||       ||   |  | ||       ||       ||   |_| ||       ||   _   ||   |  | ||       |
* |__| |__||_______||___|  |_||_______||______| |_______||_______||__| |__||___|  |_||______| 
*
* By Chalapa13.
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* GitHub: https://github.com/Chalapa13
*/

namespace Chalapa13\WorldGuard;

use pocketmine\plugin\PluginBase;
use pocketmine\command\{Command, CommandSender, ConsoleCommandSender};
use pocketmine\event\player\PlayerCommandPreprocessEvent;
use pocketmine\utils\TextFormat as TF;
use pocketmine\Player;
use pocketmine\entity\Effect;
use pocketmine\level\Position;
use pocketmine\permission\{Permission, Permissible, PermissionManager};
use pocketmine\network\mcpe\protocol\SetTimePacket;
use pocketmine\Server;
use Chalapa13\WorldGuard\ResourceUtils\ResourceManager;
use Chalapa13\WorldGuard\ResourceUtils\ResourceUpdater;

class WorldGuard extends PluginBase {

    const FLAGS = [
        "block-place" => "false",
        "block-break" => "false",
        "pvp" => "true",
        "deny-msg" => "true",
        "console-cmd-on-enter" => "none",
        "console-cmd-on-leave" => "none",
        "flow" => "true",
        "exp-drops" => "true",
        "invincible" => "false",
        "fall-dmg" => "true",
        "effects" => [],
        "blocked-cmds" => [],
        "allowed-cmds" => [],
        "use" => "false",
        "item-drop" => "true",
        "explosion" => "false",
        "notify-enter" => "",
        "notify-leave" => "",
        "potions" => "true",
        "allowed-enter" => "true",
        "allowed-leave" => "true",
        "game-mode" => "false",
        "sleep" => "true",
        "send-chat" => "true",
        "receive-chat" => "true",
        "enderpearl" => "true",
        "fly-mode" => 0,
        "eat" => "true",
        "hunger" => "true",
        "allow-damage-animals" => "true",
        "allow-damage-monsters" => "true",
        "allow-leaves-decay" => "true",
        "allow-plant-growth" => "true",
        "allow-spreading" => "true",
        "allow-block-burn" => "true",
        "priority" => 0
    ];

    const FLAG_TYPE = [
        "block-place" => "boolean",
        "block-break" => "boolean",
        "pvp" => "boolean",
        "deny-msg" => "boolean",
        "console-cmd-on-enter" => "string",
        "console-cmd-on-leave" => "string",
        "flow" => "boolean",
        "exp-drops" => "boolean",
        "invincible" => "boolean",
        "fall-dmg" => "boolean",
        "effects" => "array",
        "blocked-cmds" => "array",
        "allowed-cmds" => "array",
        "use" => "boolean",
        "item-drop" => "boolean",
        "explosion" => "boolean",
        "notify-enter" => "string",
        "notify-leave" => "string",
        "potions" => "boolean",
        "allowed-enter" => "boolean",
        "allowed-leave" => "boolean",
        "game-mode" => "string",
        "sleep" => "boolean",
        "send-chat" => "boolean",
        "receive-chat" => "boolean",
        "enderpearl" => "boolean",
        "fly-mode" => "integer",
        "eat" => "boolean",
        "hunger" => "boolean",
        "allow-damage-animals" => "boolean",
        "allow-damage-monsters" => "boolean",
        "allow-leaves-decay" => "boolean",
        "allow-plant-growth" => "boolean",
        "allow-spreading" => "boolean",
        "allow-block-burn" => "boolean",
        "priority" => "integer"
    ];

    const FLY_VANILLA = 0;
    const FLY_ENABLE = 1;
    const FLY_DISABLE = 2;
    const FLY_SUPERVISED = 3;

    public $creating = [];
    private $process = [];
    private $regions = [];

    /**
     * @return array
     */
    public function getRegions(): array
    {
        return $this->regions;
    }

    private $players = [];
    public $muted = [];

    public $resourceManager = null;
    public $resourceUpdater = null;

    public function onEnable(){
        $this->resourceManager = ResourceManager::getInstance($this, $this->getServer());
        $this->resourceManager->loadResources();
        $this->resourceUpdater = ResourceUpdater::getInstance($this->resourceManager);
        $this->resourceUpdater->updateResourcesIfRequired(true);
       
        
        $regions = $this->resourceManager->getRegions();
        if (isset($regions)) {
            foreach ($regions as $name => $data) {
                $this->regions[$name] = new Region($name, $data["pos1"], $data["pos2"], $data["level"], $data["flags"]);
            }
        }
        $this->getServer()->getPluginManager()->registerEvents(new EventListener($this), $this);
        foreach($this->getServer()->getOnlinePlayers() as $p) {
            $this->sessionizePlayer($p);
        }
    }

    public function onDisable(){
        $this->resourceManager->saveRegions($this->regions);
    }
    
    public function getRegion(string $region)
    {
        return $this->regions[$region] ?? "";
    }

    public function getRegionByPlayer(Player $player)
    {
        if ($player instanceof Player){
            $reg = $this->getRegionOf($player);
            return $reg !== "" ? $this->getRegion($reg) : "";
        }
    }

    public function getRegionOf(Player $player): string
    {
        if ($player instanceof Player){
            return $this->players[$player->getRawUniqueId()] ?? "";
        }
    }

    public function regionExists(string $name) : bool
    {
        return isset($this->regions[$name]);
    }

    public function flagExists(string $flag) : bool
    {
        return isset(self::FLAGS[$flag]);
    }

    public function sessionizePlayer(Player $player)
    {
        $this->players[$player->getRawUniqueId()] = "";
        $this->updateRegion($player);
    }

    public function getRegionFromPosition(Position $pos)
    {
        $name = $this->getRegionNameFromPosition($pos);
        return $name !== "" ? $this->getRegion($name) : "";
    }

    public function getRegionNameFromPosition(Position $pos) : string
    {
        $currentRegion = "";
        $highestPriority = -1;
        $global = new Position(0,0,0,$pos->getLevel());
        foreach ($this->regions as $name => $region) {
            if ($region->getLevelName() === $pos->getLevel()->getName()) {
                $reg1 = $region->getPos1();
                $reg2 = $region->getPos2();
                $x = array_flip(range($reg1[0], $reg2[0]));
                if (isset($x[$pos->x])) {
                    $y = array_flip(range($reg1[1], $reg2[1]));
                    if (isset($y[$pos->y])) {
                        $z = array_flip(range($reg1[2], $reg2[2]));
                        if (isset($z[$pos->z])) {
                            if($highestPriority<intval($region->getFlag("priority")))
                            {
                                $highestPriority = intval($region->getFlag("priority"));
                                $currentRegion = $name;
                            }
                        }
                    }
                }
            }
        }
        if($currentRegion == ""){
            if ($this->regionExists("global.".$pos->getLevel()->getName())){
                $currentRegion = "global.".$pos->getLevel()->getName();
            }
        }
        return $currentRegion;
    }

    public function onRegionChange(Player $player, string $oldregion, string $newregion)
    {
        $new = $this->getRegion($newregion);
        $old = $this->getRegion($oldregion);
        
        if ($player instanceof Player){
            if($this->resourceManager->getConfig()["debugging"] === true){
                if(gettype($new) === "string"){
                    $this->getLogger()->info("New Region is empty");
                }
                else{
                    $this->getLogger()->info("New Region: " . $new->getName());
                }
            }
            if($this->resourceManager->getConfig()["debugging"] === true){
                if(gettype($old) === "string"){
                    $this->getLogger()->info("Old Region is empty");
                }
                else{
                    $this->getLogger()->info("Old Region: " . $old->getName());
                }
            }
            if ($old !== "") {
                if ($old->getFlag("console-cmd-on-leave") !== "none"){
                    $cmd = str_replace("%player%", $player->getName(), $old->getFlag("console-cmd-on-leave"));
                    $player->getServer()->dispatchCommand(new ConsoleCommandSender(), $cmd);
                }
                if ($old->getFlag("allowed-leave") === "false") 
                {
                    if(!$player->hasPermission("worldguard.leave." . $oldregion))
                    {
                        $player->sendMessage(TF::RED. $this->resourceManager->getMessages()["denied-leave"]);
                        return false;
                    }
                }
                if (($msg = $old->getFlag("notify-leave")) !== "") {
                    $player->sendTip(Utils::aliasParse($player, $msg));
                }
                if ($old->getFlag("receive-chat") === "false") {
                    unset($this->muted[$player->getRawUniqueId()]);
                }
                foreach ($player->getEffects() as $effect) {
                    if ($effect->getDuration() >= 999999) {
                        $player->removeEffect($effect->getId());
                    }
                }
                
                if ($old->getFlight() === self::FLY_SUPERVISED) {
                    if ($player->getGamemode() != 1){
                        Utils::disableFlight($player);
                    }
                }
            }

            if ($new !== "") {
                if ($new->getFlag("console-cmd-on-enter") !== "none"){
                    $cmd = str_replace("%player%", $player->getName(), $new->getFlag("console-cmd-on-enter"));
                    $player->getServer()->dispatchCommand(new ConsoleCommandSender(), $cmd);
                }
                
                if ($new->getFlag("allowed-enter") === "false"){
                    if(!$player->hasPermission("worldguard.enter." . $newregion))
                    {
                        $player->sendMessage(TF::RED. $this->resourceManager->getMessages()["denied-enter"]);
                        return false;
                    }
                }
                if (($gm = $new->getGamemode()) !== $player->getGamemode()) {
                    if(!$player->hasPermission("worldguard.bypass.gamemode." . $newregion)){
                        if ($gm !== "false"){
                            if ($gm == "0" || $gm == "1" || $gm == "2" || $gm == "3"){
                                $player->setGamemode($gm);
                                if ($gm === 0 || $gm === 2) Utils::disableFlight($player);
                            }
                            else if ($gm == "creative"){
                                $player->setGamemode(1);
                            }
                            else if ($gm == "survival"){
                                $player->setGamemode(0);
                                Utils::disableFlight($player);
                            }
                            else if ($gm == "adventure"){
                                $player->setGamemode(2);
                                Utils::disableFlight($player);
                            }
                            else if ($gm == "spectator"){
                                $player->setGamemode(3);
                            }
                        }
                    }
                }
                if (($msg = $new->getFlag("notify-enter")) !== "") {
                    $player->sendTip(Utils::aliasParse($player, $msg));
                }
                if ($new->getFlag("receive-chat") === "false") {
                    $this->muted[$player->getRawUniqueId()] = $player;
                }
                if(!$player->hasPermission("worldguard.bypass.fly." . $newregion)){
                    if (($flight = $new->getFlight()) !== self::FLY_VANILLA) {
                        if ($player->getGamemode() != 1){
                            switch ($flight) {
                                case self::FLY_ENABLE:
                                case self::FLY_SUPERVISED:
                                    if (!$player->getAllowFlight()) {
                                        $player->setAllowFlight(true);
                                    }
                                    break;
                                case self::FLY_DISABLE:
                                    Utils::disableFlight($player);
                                    break;
                            }
                        }
                    }
                }
                 //
                // EFFECTS
               //
                if($new != null && !empty($new)) {
                    $newRegionEffects = $new->getEffects();
                }
                else {
                    $newRegionEffects = null;
                }
                if($old != null && !empty($old)) {
                    $oldRegionEffects = $old->getEffects();
                }
                else {
                    $oldRegionEffects = null;
                }
                // Iterate all old effects and remove them
                if(!empty($oldRegionEffects) && $oldRegionEffects != null){
                    $playername = $player->getName();
                    if($this->resourceManager->getConfig()["debugging"] === true){
                        $this->getLogger()->info("Removing region-given effects, and re-adding any effects the player had.");
                    }
                    foreach ($new->getFlag("effects") as $effect){
                        $player->removeEffect($effect);
                    }
                }

                // Iterate all new effects and add them
                if (!empty($newRegionEffects) && $newRegionEffects != null){
                    if($this->resourceManager->getConfig()["debugging"] === true){
                        $this->getLogger()->info("Saving the player's current effects that the region overwrites, and giving the new effects from the region.");
                    }
                    foreach ($newRegionEffects as $effect){
                        $player->addEffect($effect);
                    }
                }
            }

            /*
            if($new !== "")
            {
                if(($time = $new->getFlag("freeze-time")) !== -1 )
                {
                    $pk = new SetTimePacket();
                    $pk->time = intval($time);
                    $player->dataPacket($pk);
                }
                else
                {
                    $pk = new SetTimePacket();
                    $pk->time = intval($this->getServer()->getTick());
                    $player->dataPacket($pk);
                }
            }
            else
            {
                $pk = new SetTimePacket();
                $pk->time = intval($this->getServer()->getTick());
                $player->dataPacket($pk);
            }
            */
        }
        return true;
    }

    public function updateRegion(Player $player)
    {
        $region = $this->players[$id = $player->getRawUniqueId()];
        if (($newRegion = $this->getRegionNameFromPosition($player->getPosition())) !== $region) {
            $this->players[$id] = $newRegion;
            return $this->onRegionChange($player, $region, $newRegion);
        }
        return true;
    }

    public function processCreation(Player $player)
    {
        if (isset($this->creating[$id = $player->getRawUniqueId()], $this->process[$id])) {
            $name = $this->process[$id];
            $map = $this->creating[$id];
            $level = $map[0][3];
            unset($map[0][3], $map[1][3]);
            $this->regions[$name] = new Region($name, $map[0], $map[1], $level, self::FLAGS);
            unset($this->process[$id], $this->creating[$id]);
		
            $permission = new Permission("worldguard.enter." . $name, "Allows player to enter the " . $name . " region.", Permission::DEFAULT_OP);
            $permission->addParent("worldguard.enter", true);
            PermissionManager::getInstance()->addPermission($permission);

            $permission = new Permission("worldguard.leave." . $name, "Allows player to leave the " . $name . " region.", Permission::DEFAULT_OP);
            $permission->addParent("worldguard.leave", true);
            PermissionManager::getInstance()->addPermission($permission);

            $permission = new Permission("worldguard.place." . $name, "Allows player to build blocks in " . $name . " region.", Permission::DEFAULT_OP);
            $permission->addParent("worldguard.place", true);
            PermissionManager::getInstance()->addPermission($permission);
		
            $permission = new Permission("worldguard.block-place." . $name, "Allows player to build blocks in " . $name . " region.", Permission::DEFAULT_OP);
            $permission->addParent("worldguard.block-place", true);
            PermissionManager::getInstance()->addPermission($permission);

            $permission = new Permission("worldguard.break." . $name, "Allows player to break blocks in " . $name . " region.", Permission::DEFAULT_OP);
            $permission->addParent("worldguard.break", true);
            PermissionManager::getInstance()->addPermission($permission);
		
            $permission = new Permission("worldguard.block-break." . $name, "Allows player to build blocks in " . $name . " region.", Permission::DEFAULT_OP);
            $permission->addParent("worldguard.block-break", true);
            PermissionManager::getInstance()->addPermission($permission);

            $permission = new Permission("worldguard.edit." . $name, "Allows player to edit blocks in " . $name . " region.", Permission::DEFAULT_OP);
            $permission->addParent("worldguard.edit", true);
            PermissionManager::getInstance()->addPermission($permission);

            $permission = new Permission("worldguard.eat." . $name, "Allows player to eat in " . $name . " region.", Permission::DEFAULT_OP);
            $permission->addParent("worldguard.eat", true);
            PermissionManager::getInstance()->addPermission($permission);

            $permission = new Permission("worldguard.drop." . $name, "Allows player to drop items in " . $name . " region.", Permission::DEFAULT_OP);
            $permission->addParent("worldguard.drop", true);
            PermissionManager::getInstance()->addPermission($permission);

            $permission = new Permission("worldguard.usechest." . $name, "Allows player to use chests in " . $name . " region.", Permission::DEFAULT_OP);
            $permission->addParent("worldguard.usechest", true);
            PermissionManager::getInstance()->addPermission($permission);

            $permission = new Permission("worldguard.usechestender." . $name, "Allows player to use ender chests in " . $name . " region.", Permission::DEFAULT_OP);
            $permission->addParent("worldguard.usechestender", true);
            PermissionManager::getInstance()->addPermission($permission);
		
            $permission = new Permission("worldguard.usetrappedchest." . $name, "Allows player to use trapped chests in " . $name . " region.", Permission::DEFAULT_OP);
            $permission->addParent("worldguard.usetrappedchest", true);
            PermissionManager::getInstance()->addPermission($permission);

            $permission = new Permission("worldguard.enchantingtable." . $name, "Allows player to use enchanting table in " . $name . " region.", Permission::DEFAULT_OP);
            $permission->addParent("worldguard.enchantingtable", true);
            PermissionManager::getInstance()->addPermission($permission);

            $permission = new Permission("worldguard.usedoors." . $name, "Allows player to use doors in " . $name . " region.", Permission::DEFAULT_OP);
            $permission->addParent("worldguard.usedoors", true);
            PermissionManager::getInstance()->addPermission($permission);

            $permission = new Permission("worldguard.usetrapdoors." . $name, "Allows player to use trapdoors in " . $name . " region.", Permission::DEFAULT_OP);
            $permission->addParent("worldguard.usetrapdoors", true);
            PermissionManager::getInstance()->addPermission($permission);

            $permission = new Permission("worldguard.usegates." . $name, "Allows player to use gates in " . $name . " region.", Permission::DEFAULT_OP);
            $permission->addParent("worldguard.usegates", true);
            PermissionManager::getInstance()->addPermission($permission);

            $permission = new Permission("worldguard.usefurnaces." . $name, "Allows player to use furnaces in " . $name . " region.", Permission::DEFAULT_OP);
            $permission->addParent("worldguard.usefurnaces", true);
            PermissionManager::getInstance()->addPermission($permission);

            $permission = new Permission("worldguard.useanvil." . $name, "Allows player to use anvils in " . $name . " region.", Permission::DEFAULT_OP);
            $permission->addParent("worldguard.useanvil", true);
            PermissionManager::getInstance()->addPermission($permission);

            $permission = new Permission("worldguard.usecauldron." . $name, "Allows player to use cauldron in " . $name . " region.", Permission::DEFAULT_OP);
            $permission->addParent("worldguard.usecauldron", true);
            PermissionManager::getInstance()->addPermission($permission);

            $permission = new Permission("worldguard.usebrewingstand." . $name, "Allows player to use brewing stands in " . $name . " region.", Permission::DEFAULT_OP);
            $permission->addParent("worldguard.usebrewingstand", true);
            PermissionManager::getInstance()->addPermission($permission);

            $permission = new Permission("worldguard.usebeacon." . $name, "Allows player to use beacons in " . $name . " region.", Permission::DEFAULT_OP);
            $permission->addParent("worldguard.usebeacon", true);
            PermissionManager::getInstance()->addPermission($permission);
		
            $permission = new Permission("worldguard.usepressureplate." . $name, "Allows player to use pressureplates in " . $name . " region.", Permission::DEFAULT_OP);
            $permission->addParent("worldguard.usepressureplate", true);
            PermissionManager::getInstance()->addPermission($permission);
		
            $permission = new Permission("worldguard.usebutton." . $name, "Allows player to use buttons in " . $name . " region.", Permission::DEFAULT_OP);
            $permission->addParent("worldguard.usebutton", true);
            PermissionManager::getInstance()->addPermission($permission);
            $this->resourceManager->saveRegions($this->regions);
            return $name;
        }
        return false;
    }
   
    public function onCommand(CommandSender $issuer, Command $cmd, string $label, array $args): bool
    {
        switch (strtolower($cmd->getName())) {
            case "worldguard":
                if(!$issuer->hasPermission("worldguard.ui"))
                {
                    $issuer->sendMessage($this->resourceManager->getMessages()["no-permission-for-command"]);
                    return false;
                }
                GUI::displayMenu($issuer);
                break;
            case "region":
                if (!$issuer->hasPermission("worldguard.create") || !$issuer->hasPermission("worldguard.modify") || !$issuer->hasPermission("worldguard.delete")) {
                    $issuer->sendMessage($this->resourceManager->getMessages()["no-permission-for-command"]);
                    return false;
                }
                if (isset($args[0])) {
                    switch ($args[0]) {
                        case "setbiome":
                            if (!$issuer->hasPermission("worldguard.modify")) {
                                $issuer->sendMessage($this->resourceManager->getMessages()["no-permission-for-command"]);
                                return false;
                            }
                            if (isset($args[1]) && isset($args[2])) {
                                if (!ctype_alnum($args[1])) {
                                    $issuer->sendMessage(TF::RED.'Region name must be alpha numeric.');
                                    return false;
                                }
                                if ($this->regionExists($args[1])) {
                                    Utils::setBiome($this, $this->getRegion($args[1]), $args[2]);
                                    $issuer->sendMessage(TF::YELLOW.'You have changed the region\'s biome.');
                                    $this->resourceManager->saveRegions($this->regions);
                                } else {
                                    $issuer->sendMessage(TF::RED.$args[1].' region does not exist. Use /region list to get a list of all regions.');
                                }
                            } else {
                                $issuer->sendMessage(TF::RED.'/region setbiome <name> <biome_name>');
                            }
                            break;
                        case "create":
                            if (!$issuer->hasPermission("worldguard.create")) {
                                $issuer->sendMessage($this->resourceManager->getMessages()["no-permission-for-command"]);
                                return false;
                            }
                            if (isset($args[1])) {
                                if (!ctype_alnum($args[1])) {
                                    $issuer->sendMessage(TF::RED.'Region names cannot contain special characters.');
                                    return false;
                                }
                                if ($this->regionExists($args[1])) {
                                    $issuer->sendMessage(TF::RED.'This region already exists. Redefine it using /region redefine '.$args[1].', or remove it using /region remove '.$args[1]);
                                    return false;
                                } else {
                                    if (isset($args[2])){
                                        if($args[2] == "extended"){
                                            unset($this->creating[$id = $issuer->getRawUniqueId()], $this->process[$id]);
                                            $this->creating[$id] = [];
                                            $this->process[$id]= $args[1];
                                            $this->extended[$id] = [];
                                            $issuer->sendMessage(TF::YELLOW.'Right-Click two positions to complete creating the extended region ('.$args[1].').');
                                        }
                                        else{
                                            $issuer->sendMessage(TF::RED."Flag '".$args[2]."' not recognized.");
                                            return false;
                                        }
                                    }
                                    else{
                                        if ($args[1] == "global"){
                                            if ($this->regionExists($args[1].".".$issuer->getLevel()->getName())) {
                                                $issuer->sendMessage(TF::RED."A global region for this world already exists!");
                                                return false;
                                            }
                                            else{
                                                unset($this->creating[$id = $issuer->getRawUniqueId()], $this->process[$id]);
                                                $this->process[$id]= ("global.".$issuer->getLevel()->getName());
                                                $this->creating[$id][] = [0, 0, 0, $issuer->getLevel()->getName()];
                                                $this->creating[$id][] = [0, 0, 0, $issuer->getLevel()->getName()];
                                                $this->processCreation($issuer);
                                                $issuer->sendMessage(TF::GREEN."Global region for world ".$issuer->getLevel()->getName()." created.");
                                            }
                                        }
                                        else{
                                            unset($this->creating[$id = $issuer->getRawUniqueId()], $this->process[$id]);
                                            $this->creating[$id] = [];
                                            $this->process[$id]= $args[1];
                                            $issuer->sendMessage(TF::YELLOW.'Right-Click two positions to complete creating the region ('.$args[1].').');
                                        }
                                    }
                                }
                            } else {
                                $issuer->sendMessage(TF::RED.'/region create <name>');
                            }
                            break;
                        case "delete":
                            if (!$issuer->hasPermission("worldguard.delete")) {
                                $issuer->sendMessage($this->resourceManager->getMessages()["no-permission-for-command"]);
                                return false;
                            }
                            if (isset($args[1])) {
                                if ($this->regionExists($args[1])) {
                                    unset($this->regions[$args[1]]);
                                    foreach ($this->getServer()->getOnlinePlayers() as $player) {
                                        $this->updateRegion($player);
                                    }
                                    $issuer->sendMessage(TF::YELLOW.'You have deleted the region: '.$args[1]);
                                    $this->resourceManager->saveRegions($this->regions);
                                } else {
                                    $issuer->sendMessage(TF::RED.$args[1].' region does not exist. Use /region list to get a list of all regions.');
                                }
                            } else {
                                $issuer->sendMessage(TF::RED.'/region delete <name>');
                            }
                            break;
                        case "list":
                            $msg = TF::LIGHT_PURPLE."Regions: \n".TF::LIGHT_PURPLE;
                            if (empty($this->regions)) {
                                $msg .= "You haven't created any regions yet. Use /region create <name> to create your first region.";
                            } else {
                                $msg .= implode(TF::WHITE.', '.TF::LIGHT_PURPLE, array_keys($this->regions));
                            }
                            $issuer->sendMessage($msg);
                            break;
                        case "info":
                            $reg = $this->getRegionOf($issuer);
                            if ($reg !== "") {
                                $issuer->chat("/rg flags get ".$reg);
                                return true;
                            }
                            else {
                                $issuer->sendMessage(TF::RED."You are not currently standing in any regions.");
                                return false;
                            }
                            break;
                        case "redefine":
                            if (!isset($args[1])) {
                                $issuer->sendMessage(TF::RED.'/region redefine <region>');
                                return false;
                            }
                            else{
                                if (!$this->regionExists($args[1])) {
                                    $issuer->sendMessage(TF::RED.$args[1].' region does not exist. Use /region list to get a list of all regions.');
                                    return false;
                                }
                                else {
                                       unset($this->creating[$id = $issuer->getRawUniqueId()], $this->process[$id]);
                                       $this->creating[$id] = [];
                                       $this->process[$id]= $args[1];
                                       $issuer->sendMessage(TF::LIGHT_PURPLE.'Right-Click two positions to redefine your region ('.$args[1].').');
                                }
                            }
                            break;
                        case "getplayer":
                            if (isset($args[1])) {
                                if (($player = $this->getServer()->getPlayerExact($args[1])) !== null) {
                                    $reg = $this->getRegionOf($player);
                                    if ($reg !== "") {
                                        $issuer->sendMessage(TF::YELLOW.$player->getName().' is in '.$reg.'.');
                                    } else {
                                        $issuer->sendMessage(TF::YELLOW.$player->getName().'is not in any region.');
                                    }
                                } else {
                                    $issuer->sendMessage(TF::RED.$args[1].' is offline.');
                                }
                            } else {
                                $issuer->sendMessage(TF::RED.'/region getplayer <player>');
                            }
                            break;
                        case "flag":
                        case "flags":
                            if (!$issuer->hasPermission("worldguard.modify")) {
                                $issuer->sendMessage($this->resourceManager->getMessages()["no-permission-for-command"]);
                                return false;
                            }
                            if (isset($args[1], $args[2])) {
                                if (!$this->regionExists($args[2])) {
                                    $issuer->sendMessage(TF::RED.'The specified region does not exist. Use /region list to get a list of all regions.');
                                    return false;
                                }
                                if ($args[1] !== "get") {
                                    if (!isset($args[3])) {
                                        $issuer->sendMessage(TF::RED."You haven't specified the <flag>.");
                                        return false;
                                    } elseif (!$this->flagExists($args[3])) {
                                        $issuer->sendMessage(TF::RED."The specified flag does not exist. Available flags:\n".TF::LIGHT_PURPLE.implode(TF::WHITE.', '.TF::LIGHT_PURPLE, array_keys(self::FLAGS)));
                                        return false;
                                    }
                                }
                                switch ($args[1]) {
                                    case "get":
                                        $flags = $this->getRegion($args[2])->getFlagsString();
                                        $issuer->sendMessage(TF::LIGHT_PURPLE.$args[2]."'s flags:\n".$flags);
                                        break;
                                    case "set":
                                        if (!isset($args[4])) {
                                            $issuer->sendMessage(TF::RED.'You must specify the <value> of the flag.');
                                            return false;
                                        }
                                        $args[4] = str_replace("allow", "true", $args[4]);
                                        $args[4] = str_replace("deny", "false", $args[4]);
                                        $val = $args;
                                        unset($val[0], $val[1], $val[2], $val[3]);
                                        $opt = $this->getRegion($args[2])->setFlag($args[3], array_values($val));
                                        if ($opt !== null) {
                                            $issuer->sendMessage($opt);
                                        } else {
                                            $issuer->sendMessage(TF::YELLOW.'Flag has been updated successfully.');
                                            $this->resourceManager->saveRegions($this->regions);
                                        }
                                        break;
                                    case "reset":
                                        $this->getRegion($args[2])->resetFlag($args[3]);
                                        $issuer->sendMessage(TF::YELLOW."Flag ".$args[3]." has been reset to it's default value.");
                                        $this->resourceManager->saveRegions($this->regions);
                                        break;
                                }
                            } else {
                                $issuer->sendMessage(TF::RED."/region flags <get/set/reset> <region> <flag> <value>\n".TF::GRAY.'<value> argument is only needed if you are setting the flag.');
                            }
                            break;
                    }
                } else {
                    $issuer->sendMessage(implode("\n".TF::LIGHT_PURPLE, [
                        "§9§lWorldGuard §r§9Help Page §7(by Chalapa)",
                        " ",
                        "§e/worldguard §7- §eOpen up the User Interface",
                        "§a/region create <region name> §7- §aCreate a new region.",
                        "§3/region list §7- §3List all regions.",
                        "§6/region info <region name> §7- §6Get information about your current region.",
                        "§c/region delete <region name> §7- §cPermanently delete a region.",
                        "§d/region flags <set/get/reset> <region name> §7- §dSet, Get, or Reset <region name>'s flags.",
                        " ",
                        "§9For additional help and documentation, visit WorldGuard's GitHub page:",
                        "§9https://github.com/Chalapa13/WorldGuard/",
                    ]));
                }
                break;
        }
        return true;
    }
}
<?php


namespace Chalapa13\WorldGuard\ResourceUtils;

use pocketmine\plugin\PluginBase;
use pocketmine\Server;
use Chalapa13\WorldGuard\WorldGuard;

class ResourceManager
{
    /** Only 1 instance of this class will be allowed at all times */
    private static $instance = null;
    private $resUpdaterInstance = null;
    private $pluginInstance = null;
    private $serverInstance = null;
    private $pluginVersion = null;
    private $messages = [];
    private $lang = [];
    private $config = [];
    private $regions = [];


    private function __construct(WorldGuard $plugin, Server $sv)
    {
        $this->pluginInstance = $plugin;
        $this->serverInstance = $sv;
        $this->resUpdaterInstance = ResourceUpdater::getInstance($this);

        $this->pluginVersion = $this->pluginInstance->getDescription()->getVersion();
    }

    public static function getInstance(WorldGuard $plugin, Server $sv)
    {
        if(ResourceManager::$instance === null)
            ResourceManager::$instance = new ResourceManager($plugin, $sv);

        return ResourceManager::$instance;
    }

    public function getConfig() { return $this->config; }
    public function getLanguagePack() { return $this->lang; }
    public function getMessages() { return $this->messages; }
    public function getRegions() : array { return $this->regions; }

    public function getPluginVersion() { return $this->pluginVersion; }

    public function getConfigVersion()
    {
        if(isset($this->config['version']))
            return $this->config['version'];

        return null;
    }

    public function getLanguagePackVersion()
    {
        if(isset($this->lang['version']))
            return $this->lang['version'];

        return null;
    }

    public function getMessagesVersion()
    {
        if(isset($this->messages['version']))
            return $this->messages['version'];

        return null;
    }


    public function loadResources()
    {
        if (!is_dir($path = $this->pluginInstance->getDataFolder())) {
            mkdir($path);
        }

        $this->loadConfig($path);
        $this->loadLanguagePack($path);
        $this->loadMessages($path);
        $this->loadRegions($path);
    }

    public function loadRegions($path)
    {
        /**
         * load regions if file exists and if not create a file
         */
        if (is_file($path.'regions.yml')) {
            $this->regions = yaml_parse_file($path.'regions.yml');
        } else {
            yaml_emit_file($path.'regions.yml', []);
        }
    }

    public function saveRegions($regions){
        $this->regions = $regions;

        $data = [];
        foreach ($regions as $name => $region) {
            $data[$name] = $region->toArray();
        }
        yaml_emit_file($this->pluginInstance->getDataFolder().'regions.yml', $data);
        return true;
    }

    public function loadConfig($path)
    {
        /**
         * load config if file exists and if not create a file
         */
        if (is_file($path.'config.yml')) {
            $this->config = yaml_parse_file($path.'config.yml');
        } else {
            $this->config = $this->resUpdaterInstance->getDefaultConfig();

            yaml_emit_file($path.'config.yml', $this->config);
        }
    }

    public function loadLanguagePack($path)
    {
        /**
         * load language file
         */
        if (is_file($path . "lang_" . $this->config["language"] . ".yml")) {
            $this->lang = yaml_parse_file($path . "lang_" . $this->config["language"] . ".yml");
        } else {
            // if the file does not exist, generate a default english one and use that file
            $this->config["language"] = "en";
            yaml_emit_file($path.'config.yml', $this->config);

            $this->lang = $this->resUpdaterInstance->getDefaultLanguagePack();

            yaml_emit_file($path.'lang_en.yml', $this->lang);
        }
    }

    public function loadMessages($path)
    {
        /**
         * load messages if file exists and if not write the default ones
         */
        if(is_file($path.'messages.yml'))
        {
            $this->messages = yaml_parse_file($path.'messages.yml');
        }
        else{
            $this->messages = $this->resUpdaterInstance->getDefaultMessages();

            yaml_emit_file($path.'messages.yml', $this->messages);
        }
    }

    public function saveConfig($config)
    {
        $this->config = $config;

        $path = $this->pluginInstance->getDataFolder();
        yaml_emit_file($path.'config.yml', $this->config);
    }

    public function saveMessages($messages)
    {
        $this->messages = $messages;

        $path = $this->pluginInstance->getDataFolder();
        yaml_emit_file($path.'messages.yml', $this->messages);
    }

    public function saveLanguagePack($langPack)
    {
        $this->lang = $langPack;

        $path = $this->pluginInstance->getDataFolder();
        yaml_emit_file($path . "lang_" . $this->config["language"] . ".yml", $this->lang);
    }

}
<?php


namespace Chalapa13\WorldGuard\ResourceUtils;


/** This class is an utility that will be used to fix conflicts between old and new resources
 * in order to avoid crashes due to changes in resource files between updates of the plugin
 */
class ResourceUpdater
{
    /** Only 1 instance of this class will be allowed at all times */
    private static $instance = null;
    private $resourceManagerInstance = null;

    private $defaultConfig = null;
    private $defaultMessages = null;
    private $defaultLanguagePack = null;

    private function __construct(ResourceManager $resourceManagerInstance)
    {
        $this->resourceManagerInstance = $resourceManagerInstance;

        $this->defaultConfig = array(
            "version" => $this->resourceManagerInstance->getPluginVersion(),
            "language" => "en",
            "debugging" => false);

        $this->defaultMessages = array (
            "version" => $this->resourceManagerInstance->getPluginVersion(),
            "denied-enter" => "You cannot enter this area.",
            "denied-leave" => "You cannot leave this area.",
            "no-permission-for-command" => "You do not have permission to use this command.",
            "denied-eat" => "You cannot eat in this area.",
            "denied-ender-pearls" => "You cannot use ender pearls in this area.",
            "denied-chat" => "You cannot chat in this region.",
            "denied-item-drop" => "You cannot drop items in this region.",
            "denied-pvp" => "You cannot hurt players of this region.",
            "denied-block-break" => "You cannot break blocks in this region.",
            "denied-block-place" => "You cannot place blocks in this region.",
            "denied-hurt-animal" => "You cannot hurt animals of this region.",
            "denied-hurt-monster" => "You cannot hurt monsters of this region."
        );

        $this->defaultLanguagePack = array(
            "version" => $this->resourceManagerInstance->getPluginVersion(),
            "author_name" => "Chalapa",
            "gui_wg_menu_title" => "World Guard Menu",
            "gui_label_choose_option" => "Choose an option",
            "gui_btn_rg_management" => "Region Management",
            "gui_btn_help" => "Help",
            "gui_btn_manage_existing" => "Manage existing region",
            "gui_btn_create_region" => "Create a new region",
            "gui_btn_redefine_region" => "Redefine a region",
            "gui_btn_delete_region" => "Delete a region",
            "gui_creation_menu_title" => "Region Creation",
            "gui_creation_menu_label1" => "Let's help you create a region.",
            "gui_creation_menu_rg_name_box" => "First you will have to enter a name for your region.",
            "gui_creation_menu_label2" => "If you want your region to expand infinitely upwards and downards check the following option.",
            "gui_creation_menu_toggle_expand" => "Expand vertically",
            "gui_creation_menu_label3" => "Now hit the §a'Submit'§r and select 2 corners of your region as you will be instructed next.",
            "gui_dropdown_select_redefine" => "Select the region you would like to redefine",
            "gui_dropdown_select_delete" => "Select the region you would like to delete",
            "gui_dropdown_select_manage" => "Select the region you would like to manage",
            "gui_manage_menu_title" => "Managing region:",
            "gui_flag_pvp" => "PvP",
            "gui_flag_xp_drops" => "Experience drops",
            "gui_flag_invincible" => "Invincible",
            "gui_flag_fall_dmg" => "Fall damage",
            "gui_flag_usage" => "Use",
            "gui_flag_item_drop" => "Item drop",
            "gui_flag_explosions" => "Explosions",
            "gui_flag_notify_enter" => "Notify enter",
            "gui_flag_notify_leave" => "Notify leave",
            "gui_flag_potions" => "Allow potions",
            "gui_flag_allowed_enter" => "Allowed enter",
            "gui_flag_allowed_leave" => "Allowed leave",
            "gui_flag_gm" => "Gamemode",
            "gui_gm_survival" => "Survival",
            "gui_gm_creative" => "Creative",
            "gui_gm_adventure" => "Adventure",
            "gui_flag_sleep" => "Allow sleeping",
            "gui_flag_send_chat" => "Allow sending chat messages",
            "gui_flag_rcv_chat" => "Allow receiving chat messages",
            "gui_flag_enderpearl" => "Allow use of ender pearls",
            "gui_flag_fly_mode" => "Fly mode",
            "gui_enabled" => "Enabled",
            "gui_disabled" => "Disabled",
            "gui_flag_eat" => "Allow eating",
            "gui_flag_hunger" => "Disable Hunger",
            "gui_flag_dmg_animals" => "Allow damaging of animals",
            "gui_flag_dmg_monsters" => "Allow damaging of monsters",
            "gui_flag_leaf_decay" => "Allow leaf decay",
            "gui_flag_plant_growth" => "Allow plant growth",
            "gui_flag_spread" => "Allow spreading",
            "gui_flag_block_burn" => "Allow block burn",
            "gui_flag_priority" => "Region priority",
            "gui_help_menu_label1" => "If you need help setting up world guard check out the tutorial we made for you:",
            "gui_help_menu_label2" => "http://worldguard.ddns.net/tutorial"
        );
    }

    public static function getInstance(ResourceManager $resourceManagerInstance)
    {
        if(ResourceUpdater::$instance === null)
            ResourceUpdater::$instance = new ResourceUpdater($resourceManagerInstance);

        return ResourceUpdater::$instance;
    }

    /** Helper functions to check if a resource file is outdated */
    public function isConfigResourceOutdated() : bool
    {
        $ver = $this->resourceManagerInstance->getConfigVersion();

        /** Old versions do not have this field so if its not set its obviously an outdated one */
        if($ver === null)
            return true;

        if($ver !== $this->resourceManagerInstance->getPluginVersion())
            return true;

        return false;
    }

    public function isMessagesResourceOutdated() : bool
    {
        $ver = $this->resourceManagerInstance->getMessagesVersion();

        /** Old versions do not have this field so if its not set its obviously an outdated one */
        if($ver === null)
            return true;

        if($ver !== $this->resourceManagerInstance->getPluginVersion())
            return true;

        return false;
    }

    public function isLanguagePackResourceOutdated() : bool
    {
        $ver = $this->resourceManagerInstance->getLanguagePackVersion();

        /** Old versions do not have this field so if its not set its obviously an outdated one */
        if($ver === null)
            return true;

        if($ver !== $this->resourceManagerInstance->getPluginVersion())
            return true;

        return false;
    }
    /****************************************************************** */

    public function getDefaultConfig() { return $this->defaultConfig; }
    public function getDefaultMessages() { return $this->defaultMessages; }
    public function getDefaultLanguagePack() { return $this->defaultLanguagePack; }

    /** For each resource file check it's version and if it doesn't match have it updated */
    public function updateResourcesIfRequired($forceUpdate = false)
    {
        if($this->isConfigResourceOutdated() || $forceUpdate === true)
        {
            $oldConfig = $this->resourceManagerInstance->getConfig();

            $newConfigKeys = array_keys($this->getDefaultConfig());

            /** If a key from the new config is not present in the old config, then add it */
            foreach ($newConfigKeys as $key)
            {
                if(!isset($oldConfig[$key]))
                    $oldConfig[$key] = $this->getDefaultConfig()[$key];
            }

            /** Change the file version to match the current version */
            $oldConfig['version'] = $this->resourceManagerInstance->getPluginVersion();

            $this->resourceManagerInstance->saveConfig($oldConfig);
        }

        if($this->isMessagesResourceOutdated() || $forceUpdate === true)
        {
            $oldMessages = $this->resourceManagerInstance->getMessages();

            $newMessagesKeys = array_keys($this->getDefaultMessages());
            foreach ($newMessagesKeys as $key)
            {
                if(!isset($oldMessages[$key]))
                    $oldMessages[$key] = $this->getDefaultMessages()[$key];
            }

            $oldMessages['version'] = $this->resourceManagerInstance->getPluginVersion();

            $this->resourceManagerInstance->saveMessages($oldMessages);
        }

        if($this->isLanguagePackResourceOutdated() || $forceUpdate === true)
        {
            $oldLangPack = $this->resourceManagerInstance->getLanguagePack();

            $newLangPackKeys = array_keys($this->getDefaultLanguagePack());
            foreach ($newLangPackKeys as $key)
            {
                if(!isset($oldLangPack[$key]))
                    $oldLangPack[$key] = $this->getDefaultLanguagePack()[$key];
            }

            $oldLangPack['version'] = $this->resourceManagerInstance->getPluginVersion();

            $this->resourceManagerInstance->saveLanguagePack($oldLangPack);
        }
    }
}
<?php

/**
*
*  _     _  _______  ______    ___      ______   _______  __   __  _______  ______    ______  
* | | _ | ||       ||    _ |  |   |    |      | |       ||  | |  ||   _   ||    _ |  |      | 
* | || || ||   _   ||   | ||  |   |    |  _    ||    ___||  | |  ||  |_|  ||   | ||  |  _    |
* |       ||  | |  ||   |_||_ |   |    | | |   ||   | __ |  |_|  ||       ||   |_||_ | | |   |
* |       ||  |_|  ||    __  ||   |___ | |_|   ||   ||  ||       ||       ||    __  || |_|   |
* |   _   ||       ||   |  | ||       ||       ||   |_| ||       ||   _   ||   |  | ||       |
* |__| |__||_______||___|  |_||_______||______| |_______||_______||__| |__||___|  |_||______| 
*
* By Chalapa13.
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* GitHub: https://github.com/Chalapa13
*/

namespace Chalapa13\WorldGuard;
use pocketmine\block\Block;
use pocketmine\event\block\{BlockPlaceEvent, BlockBreakEvent, LeavesDecayEvent, BlockGrowEvent, BlockUpdateEvent, BlockSpreadEvent, BlockBurnEvent};
use pocketmine\event\entity\{EntityDamageEvent, EntityDamageByEntityEvent, EntityDeathEvent, EntityExplodeEvent, ProjectileLaunchEvent};
use pocketmine\event\Listener;
use pocketmine\event\player\{PlayerJoinEvent, PlayerMoveEvent, PlayerInteractEvent, PlayerItemConsumeEvent, PlayerCommandPreprocessEvent, PlayerDropItemEvent, PlayerBedEnterEvent, PlayerChatEvent, PlayerItemHeldEvent, PlayerExhaustEvent};
use pocketmine\item\Item;
use pocketmine\item\Food;
use pocketmine\Player;
use pocketmine\utils\TextFormat as TF;
use pocketmine\entity\{Entity, Animal, Monster};
use pocketmine\plugin\MethodEventExecutor;
use pocketmine\event\plugin\PluginEvent;
use pocketmine\level\Position;
use pocketmine\network\mcpe\protocol\{ServerSettingsRequestPacket, ServerSettingsResponsePacket};
use ReflectionObject;
use function json_encode;

class EventListener implements Listener {

    //The reason why item IDs are being used directly, rather than ItemIds::CONSTANTs is for the cross-compatibility amongst forks.

    //These are the items that can be activated with the "use" flag enabled.
    const USABLES = [
        23, 25, 54, 58, 61, 62, 63, 64, 68, 69, 71, 77, 92, 93, 94, 96, 116, 117, 118, 130, 135, 138, 145, 146, 149, 150, 154, 183, 184, 185, 186, 187, 193, 194, 195, 196, 197
    ];

    const POTIONS = [
        373, 374, 437, 438, 444
    ];
    
    const OTHER = [
        256, 259, 269, 273, 277, 284, 290, 291, 292, 293, 294
    ];

    private $plugin;

    public function __construct(WorldGuard $plugin)
    {
        $this->plugin = $plugin;
    }

    /**
    * @priority MONITOR
    */
    public function onJoin(PlayerJoinEvent $event)
    {
        $this->plugin->sessionizePlayer($event->getPlayer());
    }

    public function onInteract(PlayerInteractEvent $event)
    {
        if ($event->getItem()->getID() == 325){
            $player = $event->getPlayer();
            if (($reg = $this->plugin->getRegionFromPosition($event->getBlock())) !== "") {
                if ($reg->getFlag("block-place") === "false") {
                    if($event->getPlayer()->hasPermission("worldguard.place." . $reg->getName()) || $event->getPlayer()->hasPermission("worldguard.block-place." . $reg->getName())){
                        return true;
                    }
                    else{
                        $event->setCancelled();
                        if ($reg->getFlag("deny-msg") === "true") {
                            $player->sendMessage(TF::RED. $this->plugin->resourceManager->getMessages()["denied-block-place"]);
                        }
                        return false;
                    }
                }
            }
        }
        if (isset($this->plugin->creating[$id = ($player = $event->getPlayer())->getRawUniqueId()])) {
            if ($event->getAction() === $event::RIGHT_CLICK_BLOCK) {
                $block = $event->getBlock();
                $x = $block->x;
                $z = $block->z;
                if ($x < 0){
                    $x = ($x + 1);
                }
                if ($z < 0){
                    $z = ($z + 1);
                }
                $player->sendMessage(TF::YELLOW.'Selected position: X'.$x.', Y: '.$block->y.', Z: '.$z.', Level: '.$block->getLevel()->getName());
                if (!isset($this->plugin->extended[$id = ($player = $event->getPlayer())->getRawUniqueId()])){
                    $this->plugin->creating[$id][] = [$x, $block->y, $z, $block->getLevel()->getName()];
                }
                else{
                    if (count($this->plugin->creating[$id]) == '') {
                        $this->plugin->creating[$id][] = [$x, 0, $z, $block->getLevel()->getName()];
                    }
                    elseif (count($this->plugin->creating[$id]) >= 1) {
                        $this->plugin->creating[$id][] = [$x, 255, $z, $block->getLevel()->getName()];
                    }
                }
                if (count($this->plugin->creating[$id]) >= 2) {
                    if (($reg = $this->plugin->processCreation($player)) !== false) {
                        $player->sendMessage(TF::GREEN.'Successfully created region '.$reg);
                    } else {
                        $player->sendMessage(TF::RED.'An error occurred while creating the region.');
                    }
                }
                $event->setCancelled();
                return;
            }
        }   
        if (($reg = $this->plugin->getRegionByPlayer($player)) !== "") {
                $block = $event->getBlock()->getId();
                if ($reg->getFlag("use") === "false") {
                    if($player->hasPermission("worldguard.usechest." . $reg->getName()) && $block === Block::CHEST)
                        return;
                    if($player->hasPermission("worldguard.usechestender." . $reg->getName()) && $block === Block::ENDER_CHEST)
                        return;
                    if($player->hasPermission("worldguard.usetrappedchest." . $reg->getName()) && $block === Block::TRAPPED_CHEST)
                        return;
                    if($player->hasPermission("worldguard.enchantingtable." . $reg->getName()) && $block === Block::ENCHANTING_TABLE)
                        return;
                    if($player->hasPermission("worldguard.usefurnaces." . $reg->getName()) && $block === Block::BURNING_FURNACE || $block === Block::FURNACE )
                        return;
                    if($player->hasPermission("worldguard.usedoors." . $reg->getName()) && ($block === Block::ACACIA_DOOR_BLOCK || $block === Block::BIRCH_DOOR_BLOCK || $block === Block::DARK_OAK_DOOR_BLOCK || $block === Block::IRON_DOOR_BLOCK || $block === Block::JUNGLE_DOOR_BLOCK || $block === Block::OAK_DOOR_BLOCK || $block === Block::SPRUCE_DOOR_BLOCK || $block === Block::WOODEN_DOOR_BLOCK))
                        return;
                    if($player->hasPermission("worldguard.usetrapdoors." . $reg->getName()) && ($block === Block::IRON_TRAPDOOR || $block === Block::TRAPDOOR || $block === Block::WOODEN_TRAPDOOR ))
                        return;
                    if($player->hasPermission("worldguard.usegates." . $reg->getName()) && ($block === Block::ACACIA_FENCE_GATE  || $block === Block::BIRCH_FENCE_GATE || $block === Block::DARK_OAK_FENCE_GATE || $block === Block::FENCE_GATE || $block === Block::JUNGLE_FENCE_GATE || $block === Block::OAK_FENCE_GATE || $block === Block::SPRUCE_FENCE_GATE ))
                        return;
                    if($player->hasPermission("worldguard.useanvil." . $reg->getName()) && ($block === Block::ANVIL))
                        return;
                    if($player->hasPermission("worldguard.usecauldron." . $reg->getName()) && ($block === Block::CAULDRON_BLOCK))
                        return;
                    if($player->hasPermission("worldguard.usebrewingstand." . $reg->getName()) && ($block === Block::BREWING_STAND_BLOCK ))
                        return;
                    if($player->hasPermission("worldguard.usebeacon." . $reg->getName()) && ($block === Block::BEACON ))
                        return;
                    if($player->hasPermission("worldguard.usecraftingtable." . $reg->getName()) && ($block === Block::BEACON ))
                        return;
                    if($player->hasPermission("worldguard.usenoteblock." . $reg->getName()) && ($block === Block::NOTE_BLOCK ))
                        return;
                    if($player->hasPermission("worldguard.usepressureplate." . $reg->getName()) && ($block === Block::WOODEN_PRESSURE_PLATE  || $block === Block::LIGHT_WEIGHTED_PRESSURE_PLATE || $block === Block::HEAVY_WEIGHTED_PRESSURE_PLATE || $block === Block::STONE_PRESSURE_PLATE ))
                        return;
                    if($player->hasPermission("worldguard.usebutton." . $reg->getName()) && ($block === Block::STONE_BUTTON || $block === Block::WOODEN_BUTTON ))
                        return;
                     if (in_array($block, self::USABLES)) {
                        if ($reg->getFlag("deny-msg") === "true") {
                            $player->sendMessage(TF::RED.'You cannot interact with '.$event->getBlock()->getName().'s.');
                        }
                        $event->setCancelled();
                        return;
                    }
                } else $event->setCancelled(false);
                if ($reg->getFlag("potions") === "false") {
                    if (in_array($event->getItem()->getId(), self::POTIONS)) {
                        $player->sendMessage(TF::RED.'You cannot use '.$event->getItem()->getName().' in this area.');
                        $event->setCancelled();
                        return;
                    }
                } else $event->setCancelled(false);
                if(!$player->hasPermission("worldguard.edit." . $reg->getName())){
                    if (in_array($event->getItem()->getId(), self::OTHER)) {
                        $player->sendMessage(TF::RED.'You cannot use '.$event->getItem()->getName().'.');
                        $event->setCancelled();
                        return;
                    }
                } else $event->setCancelled(false);
            return;
        }
    }

    public function onBlockUpdate(BlockUpdateEvent $event){
        $block = $event->getBlock();
        if ($block->getName() === "Lava" || $block->getName() === "Water"){
            $position = new Position($block->x,$block->y,$block->z,$block->getLevel());
            if (($region = $this->plugin->getRegionFromPosition($position)) !== ""){
                if ($region->getFlag("flow") === "false"){
                    $event->setCancelled();
                }
            }
        }
    }

    /**
     * @param BlockPlaceEvent $event
     * @ignoreCancelled true
     */
    public function onPlace(BlockPlaceEvent $event)
    {
        $player = $event->getPlayer();
        $block = $event->getBlock();
        $x = $block->x;
        $z = $block->z;
        if ($x < 0){
            $x = ($x + 1);
        }
        if ($z < 0){
            $z = ($z + 1);
        }
        $position = new Position($x,$block->y,$z,$block->getLevel());
        if (($region = $this->plugin->getRegionFromPosition($position)) !== ""){
            if ($region->getFlag("block-place") === "false"){
                if($event->getPlayer()->hasPermission("worldguard.place." . $region->getName()) || $event->getPlayer()->hasPermission("worldguard.block-place." . $region->getName())){
                    return true;
                }
		else if($event->getPlayer()->hasPermission("worldguard.build-bypass")){
                    return true;
		}
                else{
                    if ($region->getFlag("deny-msg") === "true") {
                        $player->sendMessage(TF::RED. $this->plugin->resourceManager->getMessages()["denied-block-place"]);
                    }
                    $event->setCancelled();
                }
            }
        }
        return true;
    }

    /**
     * @param BlockBreakEvent $event
     * @ignoreCancelled true
     */
    public function onBreak(BlockBreakEvent $event)
    {
        $player = $event->getPlayer();
        $block = $event->getBlock();
        $x = $block->x;
        $z = $block->z;
        if ($x < 0){
            $x = ($x + 1);
        }
        if ($z < 0){
            $z = ($z + 1);
        }
        $position = new Position($x,$block->y,$z,$block->getLevel());
        if (($region = $this->plugin->getRegionFromPosition($position)) !== ""){
            if ($region->getFlag("block-break") === "false"){
                if($event->getPlayer()->hasPermission("worldguard.break." . $region->getName()) || $event->getPlayer()->hasPermission("worldguard.block-break." . $region->getName())){
                    return true;
                }
		else if($event->getPlayer()->hasPermission("worldguard.break-bypass")){
                    return true;
		}
                else{
                    if ($region->getFlag("deny-msg") === "true") {
                        $player->sendMessage(TF::RED. $this->plugin->resourceManager->getMessages()["denied-block-break"]);
                    }
                    $event->setCancelled();
                }
            }
            if ($region->getFlag("exp-drops") === "false"){
                $event->setXpDropAmount(0);
            }
        }
        return true;
    }

    public function onBurn(BlockBurnEvent $event)
    {
        if (($region = $this->plugin->getRegionFromPosition($event->getBlock())) !== "") {
            if ($region->getFlag("allow-block-burn") === "false")
                $event->setCancelled();
        }
    }

    /**
    * @priority MONITOR
    */
    public function onMove(PlayerMoveEvent $event)
    {
        if (!$event->getFrom()->equals($event->getTo())) {
            if ($this->plugin->updateRegion($player = $event->getPlayer()) !== true) {
                $player->setMotion($event->getFrom()->subtract($player->getLocation())->normalize()->multiply(4));
            }
        }
    }

    public function onHurtByEntity(EntityDamageByEntityEvent $event){
        $victim = $event->getEntity();
        $damager = $event->getDamager();
        if (($victim) instanceof Player) {
            if (($reg = $this->plugin->getRegionByPlayer($victim)) !== "") {
                if ($reg->getFlag("pvp") === "false"){
         	    	if(($damager) instanceof Player) {
                        if ($reg->getFlag("deny-msg") === "true") {
                            $damager->sendMessage(TF::RED. $this->plugin->resourceManager->getMessages()["denied-pvp"]);
                        }
                        $event->setCancelled();
                        return true;
                	}
            	}
            }
            if (($damager) instanceof Player) {
                if (($reg = $this->plugin->getRegionByPlayer($damager)) !== "") {
                    if ($reg->getFlag("pvp") === "false"){
                        if(($victim) instanceof Player) {
                            if ($reg->getFlag("deny-msg") === "true") {
                                $damager->sendMessage(TF::RED. $this->plugin->resourceManager->getMessages()["denied-pvp"]);
                            }
                            $event->setCancelled();
                            return true;
                        }
                    }
                }
            }
        }

        // $this->plugin->getLogger()->notice(get_class($event->getEntity()));

        if(Utils::isAnimal($event->getEntity()))
        {
            if(($player = $event->getDamager()) instanceof Player)
            if(($region = $this->plugin->getRegionFromPosition($event->getEntity()->getPosition())) !== "")
            {
                if ($region->getFlag("allow-damage-animals") === "false") {
                    if ($region->getFlag("deny-msg") === "true") {
                        $player->sendMessage(TF::RED. $this->plugin->resourceManager->getMessages()["denied-hurt-animal"]);
                    }
                    $event->setCancelled();
                    return;
                }
            }
        }

        if(Utils::isMonster($event->getEntity()))
        {
            if(($player = $event->getDamager()) instanceof Player)
                if(($region = $this->plugin->getRegionFromPosition($event->getEntity()->getPosition())) !== "")
                {
                    if ($region->getFlag("allow-damage-animals") === "false") {
                        $player->sendMessage(TF::RED. $this->plugin->resourceManager->getMessages()["denied-hurt-monster"]);
                        $event->setCancelled();
                        return;
                    }
                }
        }

        if(strpos(get_class($event->getEntity()), "monster") !== false)
        {
            if(($player = $event->getDamager()) instanceof Player)
            if(($region = $this->plugin->getRegionFromPosition($event->getEntity()->getPosition())) !== "")
            {
                if ($region->getFlag("allow-damage-monsters") === "false") {
                    $player->sendMessage(TF::RED.'You cannot hurt monsters of this region.');
                    $event->setCancelled();
                    return;
                }
            }
        }
    }
    
    public function onHurt(EntityDamageEvent $event) {
        if(($region = $this->plugin->getRegionFromPosition($event->getEntity()->getPosition())) !== ""){
            if ($this->plugin->getRegionFromPosition($event->getEntity()->getPosition())->getFlag("invincible") === "true"){
                if($event->getEntity() instanceof Player) {
                    $event->setCancelled();
                }
            }
        }
        return;
    }
        
    public function onFallDamage(EntityDamageEvent $event){
        if(($region = $this->plugin->getRegionFromPosition($event->getEntity()->getPosition())) !== ""){
            $entity = $event->getEntity();
            $cause = $event->getCause();
            if ($this->plugin->getRegionFromPosition($event->getEntity()->getPosition())->getFlag("fall-dmg") === "false"){
                if($cause == EntityDamageEvent::CAUSE_FALL){
                    $event->setCancelled(true);
                }
            }
        }
        return;
	}

    /**
     * @param PlayerCommandPreprocessEvent $event
     * @ignoreCancelled true
     */
    public function onCommand(PlayerCommandPreprocessEvent $event)
    {
        if($this->plugin->getRegionByPlayer($event->getPlayer()) !== "")
            if(strpos(strtolower($event->getMessage()), '/f claim') === 0)
            {
                $event->getPlayer()->sendMessage(TF::RED.'You cannot claim plots in this area.');
                $event->setCancelled();
            }


        $cmd = explode(" ", $event->getMessage())[0];
        if (substr($cmd, 0, 1) === '/') {
            if (($region = $this->plugin->getRegionByPlayer($player = $event->getPlayer())) !== "" && !$region->isCommandAllowed($cmd)) {
                if (!$player->hasPermission("worldguard.bypass-cmd.".$region->getName())){
                    $player->sendMessage(TF::RED.'You cannot use '.$cmd.' in this area.');
                    $event->setCancelled();
                }
            }
        }
    }

    /**
     * @param PlayerDropItemEvent $event
     * @ignoreCancelled true
     */
    public function onDrop(PlayerDropItemEvent $event)
    {
        if (($reg = $this->plugin->getRegionByPlayer($player = $event->getPlayer())) !== "") {
            if ($reg->getFlag("item-drop") === "false" && !$player->hasPermission("worldguard.drop." . $reg->getName())) {
                if ($reg->getFlag("deny-msg") === "true") { 
                    $player->sendMessage(TF::RED. $this->plugin->resourceManager->getMessages()["denied-item-drop"]);
                }
                $event->setCancelled();
                return;
            }
        }
    }

    /**
     * @param EntityExplodeEvent $event
     * @ignoreCancelled true
     */
    public function onExplode(EntityExplodeEvent $event)
    {
        foreach ($event->getBlockList() as $block) {
            if (($region = $this->plugin->getRegionFromPosition($block)) !== "") {
                if ($region->getFlag("explosion") === "false") {
                    $event->setCancelled();
                    return;
                }
            }
        }
    }

    /**
     * @param PlayerBedEnterEvent $event
     * @ignoreCancelled true
     */
    public function onSleep(PlayerBedEnterEvent $event)
    {
        if (($region = $this->plugin->getRegionFromPosition($event->getBed())) !== "") {
            if ($region->getFlag("sleep") === "false") {
                $event->setCancelled();
            }
        }
    }

    /**
     * @param PlayerChatEvent $event
     * @ignoreCancelled true
     */
    public function onChat(PlayerChatEvent $event)
    {
        if (($reg = $this->plugin->getRegionByPlayer($player = $event->getPlayer())) !== "") {
            if ($reg->getFlag("send-chat") === "false") {
                if ($reg->getFlag("deny-msg") === "true") {
                    $player->sendMessage(TF::RED. $this->plugin->resourceManager->getMessages()["denied-chat"]);
                }
                $event->setCancelled();
                return;
            }            
        }
        if (!empty($this->plugin->muted)) {
            $diff = array_diff($this->plugin->getServer()->getOnlinePlayers(), $this->plugin->muted);
            if (!in_array($player, $diff)) {
                $diff[] = $player;
            }
            $event->setRecipients($diff);
        }
    }

    /**
     * @param ProjectileLaunchEvent $event
     * @ignoreCancelled true
     */
    public function onEnderpearl(ProjectileLaunchEvent $event)
    {
        if ($event->getEntity()::NETWORK_ID !== 87) return;
        if (($region = $this->plugin->getRegionFromPosition($entity = $event->getEntity())) !== "") {
            if ($region->getFlag("enderpearl") === "false") {
                // if pearl was thrown by a player then cancel the event
                if ((($player = $entity->getOwningEntity()) !== null)) {
                    $event->setCancelled();
                    if ($region->getFlag("deny-msg") === "true") {
                        $player->sendMessage(TF::RED. $this->plugin->resourceManager->getMessages()["denied-ender-pearls"]);
                    }
                }
            }
        }
    }

    public function onItemConsume(PlayerItemConsumeEvent $event){
        $player = $event->getPlayer();
        $item = $event->getItem();
        if ($player instanceof Player){
            if(($region = $this->plugin->getRegionByPlayer($event->getPlayer())) !== ""){
                if($region->getFlag("eat") === "false" && !$player->hasPermission("worldguard.eat." . $region->getName())) {
                    $event->setCancelled();
                    if ($region->getFlag("deny-msg") === "true") {
                        $player->sendMessage(TF::RED. $this->plugin->resourceManager->getMessages()["denied-eat"]);
                    }
                }
            }
        }
    }
	
    public function noHunger(PlayerExhaustEvent $exhaustEvent){
        $player = $exhaustEvent->getPlayer();
        if ($exhaustEvent->getPlayer() instanceof Player){
            if(($region = $this->plugin->getRegionByPlayer($exhaustEvent->getPlayer())) !== ""){
                if($region->getFlag("hunger") === "false") {
                    $exhaustEvent->setCancelled(true);
                }
            }
        }
    }
	
    public function onLeafDecay(LeavesDecayEvent $event)
    {
        if(($region = $this->plugin->getRegionFromPosition($event->getBlock()->asPosition())) !== "")
            if($region->getFlag("allow-leaves-decay") === "false")
                $event->setCancelled();
    }

    public function onPlantGrowth(BlockGrowEvent $event)
    {
        if(($region = $this->plugin->getRegionFromPosition($event->getBlock()->asPosition())) !== "")
            if($region->getFlag("allow-plant-growth") === "false")
                $event->setCancelled();
    }

    public function onBlockSpread(BlockSpreadEvent $event)
    {
        if(($region = $this->plugin->getRegionFromPosition($event->getBlock()->asPosition())) !== "")
            if($region->getFlag("allow-spreading") === "false")
                $event->setCancelled();
    }
}
