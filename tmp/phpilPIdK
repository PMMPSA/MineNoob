<?php
declare(strict_types=1);

namespace twisted\bettervoting;

use DaPigGuy\PiggyCustomEnchants\enchants\CustomEnchant;
use DaPigGuy\PiggyCustomEnchants\enchants\CustomEnchantIds;
use DaPigGuy\PiggyCustomEnchants\PiggyCustomEnchants;
use pocketmine\item\enchantment\Enchantment;
use pocketmine\item\enchantment\EnchantmentInstance;
use pocketmine\item\ItemFactory;
use pocketmine\plugin\PluginBase;
use pocketmine\scheduler\ClosureTask;
use pocketmine\utils\TextFormat;
use twisted\bettervoting\command\VoteCommand;
use twisted\bettervoting\thread\BetterVotingThread;
use function array_slice;
use function constant;
use function count;
use function defined;
use function explode;
use function strtoupper;

final class BetterVoting extends PluginBase{

	/** @var PiggyCustomEnchants|null */
	private $piggyCustomEnchants;

	/** @var BetterVotingThread */
	private $thread;

	public function onEnable() : void{
		$this->piggyCustomEnchants = $this->getServer()->getPluginManager()->getPlugin("PiggyCustomEnchants");

		$this->thread = $thread = new BetterVotingThread();

		$this->loadConfig();

		$this->getServer()->getCommandMap()->register("bettervoting", new VoteCommand($this));
		$this->getServer()->getPluginManager()->registerEvents(new BetterVotingListener($this), $this);

		$this->getScheduler()->scheduleRepeatingTask(new ClosureTask(static function() use ($thread) : void{
			$thread->addActionToQueue(BetterVotingThread::ACTION_UPDATE_CACHE);

		}), BetterVotingCache::TIME_BETWEEN_CACHE_UPDATE * 20);
		$server = $this->getServer();
		$this->getScheduler()->scheduleRepeatingTask(new ClosureTask(static function() use ($thread, $server) : void{
			$thread->collectActionResults($server);
		}), 1);
	}

	/**
	 * Returns the thread used for voting related actions.
	 *
	 * @return BetterVotingThread
	 */
	public function getVoteThread() : BetterVotingThread{
		return $this->thread;
	}

	/**
	 * Reload the plugin's config and all of it's data.
	 */
	public function loadConfig() : void{
		$this->reloadConfig();
		$config = $this->getConfig();

		$this->thread->setApiKey((string) $config->get("api-key", ""));

		$commands = [];
		foreach($config->get("commands", []) as $command){
			$commands[] = TextFormat::colorize($command);
		}
		BetterVotingCache::setCommands($commands);

		$items = [];
		foreach($config->get("items") as $itemInfo){
			$parts = explode(":", $itemInfo);

			$item = ItemFactory::fromString($parts[0] . ":" . ($parts[1] ?? 0));
			$item->setCount((int) ($parts[2] ?? 1) > 0 ? (int) ($parts[2] ?? 1) : 1);
			if(($parts[3] ?? "default") !== "default"){
				$item->setCustomName(TextFormat::colorize($parts[3]));
			}

			if(count($parts) > 4){
				$enchants = array_slice($parts, 4);
				for($i = 0; $i < count($enchants); $i += 2){
					$enchant = null;
					if($this->piggyCustomEnchants !== null){
						$const = CustomEnchantIds::class . "::" . strtoupper($enchants[$i] ?? "");
						if(defined($const)){
							$enchant = CustomEnchant::getEnchantment(constant($const));
						}
					}
					if($enchant === null){
						$enchant = Enchantment::getEnchantmentByName($enchants[$i] ?? "");
					}

					if($enchant !== null){
						$level = (int) ($enchants[$i + 1] ?? 1);
						$level = $level > 0 ? $level : 1;

						$item->addEnchantment(new EnchantmentInstance($enchant, $level));
					}
				}
			}
			$items[] = $item;
		}
		BetterVotingCache::setItems($items);
	}
}<?php
declare(strict_types=1);

namespace twisted\bettervoting\thread;

use DateTime;
use DateTimeZone;
use pocketmine\command\ConsoleCommandSender;
use pocketmine\Player;
use pocketmine\Server;
use pocketmine\Thread;
use pocketmine\utils\TextFormat;
use Threaded;
use twisted\bettervoting\BetterVoting;
use twisted\bettervoting\BetterVotingCache;
use twisted\bettervoting\event\PlayerVoteEvent;
use function curl_close;
use function curl_exec;
use function curl_init;
use function curl_setopt;
use function igbinary_serialize;
use function igbinary_unserialize;
use function json_decode;
use function json_last_error;
use function str_replace;
use function strpos;
use const CURLOPT_FORBID_REUSE;
use const CURLOPT_FRESH_CONNECT;
use const CURLOPT_POST;
use const CURLOPT_RETURNTRANSFER;
use const CURLOPT_URL;
use const JSON_ERROR_NONE;

final class BetterVotingThread extends Thread{

	/**
	 * Identifiers used to identify actions between threads.
	 */
	public const ACTION_VALIDATE_VOTE = 0;
	public const ACTION_CLAIM_VOTE = 1;
	public const ACTION_UPDATE_CACHE = 2;

	/**
	 * Values returned from MinecraftPocket-Servers when validating a vote.
	 */
	public const VOTE_STATUS_NOT_VOTED = "0";
	public const VOTE_STATUS_CLAIMABLE = "1";
	public const VOTE_STATUS_CLAIMED = "2";

	/** @var string */
	private $apiKey = "";

	/** @var Threaded */
	private $actionQueue;
	/** @var Threaded */
	private $actionResults;

	/** @var bool */
	private $running = false;

	public function __construct(){
		$this->actionQueue = new Threaded();
		$this->actionResults = new Threaded();
	}

	public function run() : void{
		$ch = curl_init();
		curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
		curl_setopt($ch, CURLOPT_FORBID_REUSE, true);
		curl_setopt($ch, CURLOPT_FRESH_CONNECT, true);
		curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
		curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);

		while($this->running){
			while(($action = $this->actionQueue->shift()) !== null){
				$action = igbinary_unserialize($action);
				switch($action["type"]){
					case self::ACTION_VALIDATE_VOTE:
						$player = $action["player"];
						curl_setopt($ch, CURLOPT_URL, $this->getApiUrl("object=votes&element=claim&key=" . $this->apiKey . "&username=" . str_replace(" ", "%20", $player)));
						curl_setopt($ch, CURLOPT_POST, false);

						$action["result"] = curl_exec($ch);

						$this->actionResults[] = igbinary_serialize($action);

						break;
					case self::ACTION_CLAIM_VOTE:
						$player = $action["player"];
						curl_setopt($ch, CURLOPT_URL, $this->getApiUrl("action=post&object=votes&element=claim&key=" . $this->apiKey . "&username=" . str_replace(" ", "%20", $player)));
						curl_setopt($ch, CURLOPT_POST, true);

						$action["result"] = curl_exec($ch);

						$this->actionResults[] = igbinary_serialize($action);

						break;
					case self::ACTION_UPDATE_CACHE:
						curl_setopt($ch, CURLOPT_URL, $this->getApiUrl("object=servers&element=detail&key=" . $this->apiKey));
						curl_setopt($ch, CURLOPT_POST, false);

						$infoResult = curl_exec($ch);
						$action["info"] = [
							"uptime" => "0%",
							"score" => "0",
							"rank" => "0",
							"votes" => "0",
							"favorited" => "0",
							"comments" => "0"
						];
						if($infoResult !== false){
							$info = json_decode($infoResult, true);
							if(json_last_error() === JSON_ERROR_NONE){
								$action["info"] = [
									"uptime" => $info["uptime"] . "%",
									"score" => $info["score"],
									"rank" => $info["rank"],
									"votes" => $info["votes"],
									"favorited" => $info["favorited"],
									"comments" => $info["comments"]
								];
							}
						}

						curl_setopt($ch, CURLOPT_URL, $this->getApiUrl("object=servers&element=voters&key=" . $this->apiKey . "&month=current&format=json&limit=10"));
						curl_setopt($ch, CURLOPT_POST, false);

						$topResult = curl_exec($ch);
						$action["top"] = [];
						if($topResult !== false){
							$top = json_decode($topResult, true);
							if(json_last_error() === JSON_ERROR_NONE){
								foreach($top["voters"] as $voter){
									$action["top"][$voter["nickname"]] = $voter["votes"];
								}
							}
						}

						curl_setopt($ch, CURLOPT_URL, $this->getApiUrl("object=servers&element=votes&key=" . $this->apiKey . "&format=json&limit=1000"));
						curl_setopt($ch, CURLOPT_POST, false);

						$unclaimedResult = curl_exec($ch);
						$action["unclaimed"] = [];
						if($unclaimedResult !== false){
							$votes = json_decode($unclaimedResult, true);
							if(json_last_error() === JSON_ERROR_NONE){
								foreach($votes["votes"] as $vote){
									$date = new DateTime("now", new DateTimeZone("America/New_York"));
									if(strpos($vote["date"], $date->format("F jS, Y")) === 0 && $vote["claimed"] === "0"){
										$action["unclaimed"][] = $vote["nickname"];
									}
								}
							}
						}

						$this->actionResults[] = igbinary_serialize($action);

						break;
				}
			}

			$this->sleep();
		}

		curl_close($ch);
	}

	public function sleep() : void{
		$this->synchronized(function() : void{
			if($this->running){
				$this->wait();
			}
		});
	}

	public function quit() : void{
		$this->running = false;
		$this->synchronized(function() : void{
			$this->notify();
		});

		parent::quit();
	}

	/**
	 * Appends $args to the MinecraftPocket-Servers API URL to be used for http requests.
	 *
	 * @param string $args
	 *
	 * @return string
	 */
	private function getApiUrl(string $args) : string{
		return "https://minecraftpocket-servers.com/api/?" . $args;
	}

	/**
	 * Adds an action to the queue that will be executed on the next run.
	 *
	 * @param int         $action
	 * @param Player|null $player
	 */
	public function addActionToQueue(int $action, ?Player $player = null) : void{
		$toAdd = ["type" => $action];
		if($player !== null){
			$toAdd["player"] = $player->getName();
		}
		$this->actionQueue[] = igbinary_serialize($toAdd);

		$this->synchronized(function() : void{
			$this->notify();
		});
	}

	/**
	 * Returns wether an action is already in the queue, used to limit queue spam.
	 *
	 * @param int         $action
	 * @param Player|null $player
	 *
	 * @return bool
	 */
	public function isActionInQueue(int $action, ?Player $player = null) : bool{
		foreach($this->actionQueue as $queued){
			$queued = igbinary_unserialize($queued);
			if($queued["type"] === $action && ($player === null || $queued["player"] === $player->getName())){
				return true;
			}
		}

		return false;
	}

	/**
	 * "Collects" all of the action results from the thread and handles them if needed.
	 *
	 * @param Server $server
	 */
	public function collectActionResults(Server $server) : void{
		$plugin = $server->getPluginManager()->getPlugin("BetterVoting");
		if($plugin instanceof BetterVoting && $plugin->isEnabled()){
			while(($result = $this->actionResults->shift()) !== null){
				$result = igbinary_unserialize($result);
				switch($result["type"]){
					case self::ACTION_VALIDATE_VOTE:
						$player = $server->getPlayerExact($result["player"]);
						if($player !== null && $player->isOnline()){
							switch($result["result"]){
								case self::VOTE_STATUS_NOT_VOTED:
									$player->sendMessage(TextFormat::colorize($plugin->getConfig()->getNested("messages.vote.notvoted", "&cYou have not voted yet.")));

									break;
								case self::VOTE_STATUS_CLAIMABLE:
									($event = new PlayerVoteEvent($player))->call();
									if($event->isCancelled()){
										return;
									}

									$this->addActionToQueue(self::ACTION_CLAIM_VOTE, $player);

									break;
								case self::VOTE_STATUS_CLAIMED:
									$player->sendMessage(TextFormat::colorize($plugin->getConfig()->getNested("messages.vote.alreadyclaimed", "&cYou have already claimed your vote.")));

									break;
								default:
									$player->sendMessage(TextFormat::colorize($plugin->getConfig()->getNested("messages.vote.error", "&cUnable to claim your vote, please try again later.")));

									break;
							}
						}

						break;
					case self::ACTION_CLAIM_VOTE:
						$player = $server->getPlayerExact($result["player"]);
						if($player !== null && $player->isOnline()){
							if($result["result"] === "1"){
								foreach(BetterVotingCache::getCommands() as $command){
									$server->getCommandMap()->dispatch(new ConsoleCommandSender(), str_replace([
										"{username}",
										"{displayname}",
										"{x}",
										"{y}",
										"{z}"
									], [
										$player->getName(),
										$player->getDisplayName(),
										$player->getFloorX(),
										$player->getFloorY(),
										$player->getFloorZ()
									], $command));
								}
								foreach($player->getInventory()->addItem(...BetterVotingCache::getItems()) as $overflow){
									if(!$plugin->getConfig()->get("droprewards", true)){
										break;
									}

									$player->getLevel()->dropItem($player, $overflow);
								}

								$player->sendMessage(TextFormat::colorize($plugin->getConfig()->getNested("messages.vote.claimed", "&aThank you for voting! You have received your rewards.")));
							}else{
								$player->sendMessage(TextFormat::colorize($plugin->getConfig()->getNested("messages.vote.error", "&cUnable to claim your vote, please try again later.")));
							}
						}

						break;
					case self::ACTION_UPDATE_CACHE:
						BetterVotingCache::setServerInfo($result["info"]);
						BetterVotingCache::setTopVoters($result["top"]);
						BetterVotingCache::setUnclaimedVotes($unclaimed = $result["unclaimed"]);

						foreach($unclaimed as $target){
							$target = $server->getPlayerExact($target);
							if($target !== null && $target->isOnline()){
								$this->addActionToQueue(self::ACTION_CLAIM_VOTE, $target);
							}
						}

						break;
				}
			}
		}
	}

	/**
	 * Set the API key used by the thread and starts the thread if needed.
	 *
	 * @param string $apiKey
	 */
	public function setApiKey(string $apiKey) : void{
		$this->apiKey = $apiKey;

		if(!$this->running && !$this->isStarted() && $apiKey !== ""){
			$this->running = true;
			$this->start();
		}elseif($apiKey === ""){
			if($this->running){
				$this->running = false;
			}

			Server::getInstance()->getLogger()->notice("[BetterVoting] An empty API Key has been provided, the thread will not run until an API Key has been provided in the config.");
		}
	}
}
<?php
declare(strict_types=1);

namespace twisted\bettervoting;

use pocketmine\item\Item;
use pocketmine\Player;
use function in_array;

class BetterVotingCache{

	public const TIME_BETWEEN_CACHE_UPDATE = 3 * 60;

	/** @var array */
	private static $serverInfo = [];
	/** @var array */
	private static $topVoters = [];
	/** @var string[] */
	private static $unclaimedVotes = [];

	/** @var string[] */
	private static $commands = [];
	/** @var Item[] */
	private static $items = [];

	/**
	 * Returns the server info as an array, with the following keys:
	 *  "uptime" - The percentage of the server uptime
	 *  "score" - The monthly score of the server
	 *  "rank" - The rank of the server on the list (based on score)
	 *  "votes" - The number of votes in the current month
	 *  "favorited" - The number of people who have favourited the server
	 *  "comments" - The number of comments left on the server
	 *
	 * @return array
	 */
	public static function getServerInfo() : array{
		return self::$serverInfo;
	}

	/**
	 * This should only be called from the BetterVotingThread, it will
	 *  update every 3 minutes with an array the server's voting info.
	 *
	 * @param array $serverInfo
	 */
	public static function setServerInfo(array $serverInfo) : void{
		self::$serverInfo = $serverInfo;
	}

	/**
	 * Returns the top 10 voters of the current month.
	 * This will automatically update once every 3 minutes.
	 *
	 * @return int[]
	 */
	public static function getTopVoters() : array{
		return self::$topVoters;
	}

	/**
	 * This should only be called from the BetterVotingThread, it will
	 *  update every 3 minutes with an array of the top 10 voters this month.
	 *
	 * @param int[] $topVoters
	 */
	public static function setTopVoters(array $topVoters) : void{
		self::$topVoters = $topVoters;
	}

	/**
	 * Returns an array of player names that have not claimed their
	 *  votes. This will automatically update once every 3 minutes.
	 *
	 * @return array string[]
	 */
	public static function getUnclaimedVotes() : array{
		return self::$unclaimedVotes;
	}

	/**
	 * Returns whether the player has an unclaimed vote or not, this
	 *  should only be used for automatic claiming since it will
	 *  only update once every 3 minutes due to the API caching.
	 *
	 * @param Player $player
	 *
	 * @return bool
	 */
	public static function hasUnclaimedVote(Player $player) : bool{
		return in_array($player->getName(), self::$unclaimedVotes);
	}

	/**
	 * This should only be called from the BetterVotingThread, it
	 *  will update every 3 minutes with an array of unclaimed votes.
	 *
	 * @param string[] $unclaimedVotes
	 */
	public static function setUnclaimedVotes(array $unclaimedVotes) : void{
		self::$unclaimedVotes = $unclaimedVotes;
	}

	/**
	 * The commands to be executed via console
	 *  when a player claims their vote.
	 *
	 * @return string[]
	 */
	public static function getCommands() : array{
		return self::$commands;
	}

	/**
	 * Set the commands to be executed by console
	 *  when a player claims their vote.
	 *
	 * @param string[] $commands
	 */
	public static function setCommands(array $commands) : void{
		self::$commands = $commands;
	}

	/**
	 * An array of items to be added to the player's
	 *  inventory when they claim their vote.
	 *
	 * @return Item[]
	 */
	public static function getItems() : array{
		return self::$items;
	}

	/**
	 * Set the list of items that will be added to a
	 *  player's inventory when they claim their vote.
	 *
	 * @param Item[] $items
	 */
	public static function setItems(array $items) : void{
		self::$items = $items;
	}
}<?php
declare(strict_types=1);

namespace twisted\bettervoting\command;

use pocketmine\command\Command;
use pocketmine\command\CommandSender;
use pocketmine\Player;
use pocketmine\utils\TextFormat;
use twisted\bettervoting\BetterVoting;
use twisted\bettervoting\BetterVotingCache;
use twisted\bettervoting\thread\BetterVotingThread;
use function count;
use function str_replace;

class VoteCommand extends Command{

	/** @var BetterVoting */
	private $plugin;

	public function __construct(BetterVoting $plugin){
		parent::__construct("vote", "Claim your vote on the server");

		$this->plugin = $plugin;
	}

	public function execute(CommandSender $sender, string $commandLabel, array $args) : void{
		if(count($args) < 1){
			if(!$sender instanceof Player){
				$sender->sendMessage(TextFormat::colorize($this->plugin->getConfig()->getNested("messages.vote.usage.notplayer", "&cUse '/vote <info|reload|top>'.")));

				return;
			}

			if($this->plugin->getVoteThread()->isActionInQueue(BetterVotingThread::ACTION_VALIDATE_VOTE, $sender)){
				$sender->sendMessage(TextFormat::colorize($this->plugin->getConfig()->getNested("messages.vote.alreadyprocessing", "&cYour vote is already being processed.")));

				return;
			}

			$this->plugin->getVoteThread()->addActionToQueue(BetterVotingThread::ACTION_VALIDATE_VOTE, $sender);
			$sender->sendMessage(TextFormat::colorize($this->plugin->getConfig()->getNested("messages.vote.processing", "&aYour vote is being processed, please wait.")));

			return;
		}

		switch($args[0]){
			case "info":
				$info = BetterVotingCache::getServerInfo();
				$sender->sendMessage(TextFormat::colorize($this->plugin->getConfig()->getNested("messages.info.title", "&aThis server's vote information:")));
				$content = str_replace([
					"{uptime}",
					"{score}",
					"{rank}",
					"{votes}",
					"{favorited}",
					"{comments}",
				], [
					$info["uptime"] ?? "0%",
					$info["score"] ?? "0",
					$info["rank"] ?? "0",
					$info["votes"] ?? "0",
					$info["favorited"] ?? "0",
					$info["comments"] ?? "0",
				], $this->plugin->getConfig()->getNested("messages.info.content", "&aUptime: {uptime}\n&aScore: {score}\n&aRank: {rank}\n&aVotes: {votes}\n&aFavorited: {favorited}\n&aComments: {comments}"));
				$sender->sendMessage(TextFormat::colorize($content));

				break;
			case "reload":
				if(!$sender->hasPermission("bettervoting.command.reload")){
					$sender->sendMessage(TextFormat::colorize($this->plugin->getConfig()->getNested("messages.noperms", "&cYou do not have permission to use this command.")));

					return;
				}

				$this->plugin->loadConfig();
				$sender->sendMessage(TextFormat::colorize($this->plugin->getConfig()->getNested("messages.reload.success", "&aYou have reloaded the server's vote configuration.")));

				break;
			case "top":
				$top = BetterVotingCache::getTopVoters();
				if(count($top) < 1){
					$sender->sendMessage(TextFormat::colorize($this->plugin->getConfig()->getNested("messages.top.novoters", "&cThere are no top voters.")));

					return;
				}

				$sender->sendMessage(TextFormat::colorize($this->plugin->getConfig()->getNested("messages.top.title", "&aTop voters this month:")));
				$place = 1;
				foreach($top as $player => $votes){
					$format = str_replace([
						"{place}",
						"{username}",
						"{votes}"
					], [
						$place,
						$player,
						$votes
					], $this->plugin->getConfig()->getNested("messages.top.format", "&a{place}. {username}: {votes}"));
					$sender->sendMessage(TextFormat::colorize($format));
					++$place;
				}

				break;
			default:
				if($sender instanceof Player){
					if($sender->hasPermission("bettervoting.command.reload")){
						$sender->sendMessage(TextFormat::colorize($this->plugin->getConfig()->getNested("messages.vote.usage.reloadperm", "&cUse '/vote [info|reload|top].")));

						return;
					}
					$sender->sendMessage(TextFormat::colorize($this->plugin->getConfig()->getNested("messages.vote.usage.other", "&cUse '/vote [info|top].")));

					return;
				}
				$sender->sendMessage(TextFormat::colorize($this->plugin->getConfig()->getNested("messages.vote.usage.notplayer", "&cUse '/vote <info|reload|top>'.")));

				break;
		}
	}
}<?php
declare(strict_types=1);

namespace twisted\bettervoting;

use pocketmine\event\Listener;
use pocketmine\event\player\PlayerJoinEvent;
use pocketmine\scheduler\ClosureTask;
use twisted\bettervoting\thread\BetterVotingThread;

class BetterVotingListener implements Listener{

	/** @var BetterVoting */
	private $plugin;

	public function __construct(BetterVoting $plugin){
		$this->plugin = $plugin;
	}

	public function onPlayerJoin(PlayerJoinEvent $event) : void{
		$player = $event->getPlayer();
		if(BetterVotingCache::hasUnclaimedVote($player)){
			$thread = $this->plugin->getVoteThread();
			$this->plugin->getScheduler()->scheduleDelayedTask(new ClosureTask(static function() use ($player, $thread) : void{
				if($player->isOnline()){
					$thread->addActionToQueue(BetterVotingThread::ACTION_CLAIM_VOTE, $player);
				}
			}), 20);
		}
	}
}