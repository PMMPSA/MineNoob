<?php

declare(strict_types=1);

namespace shelly7w7\HealthTag;

use pocketmine\plugin\PluginBase;
use pocketmine\utils\Config;

class Main extends PluginBase{

	/** @var Config $config */
	protected $config;
	/** @var self $instance */
	protected static $instance;

	public function onEnable() : void{
		self::$instance = $this;
        $this->getServer()->getCommandMap()->register("healthtag", new HealthTagCommand($this));
		$this->getScheduler()->scheduleRepeatingTask(new TagTask(), 10);
	}

	public static function getInstance() : self{
		return self::$instance;
	}
}<?php
declare(strict_types=1);
namespace shelly7w7\HealthTag;

use pocketmine\Player;
use shelly7w7\HealthTag\FormAPI\CustomForm;
use pocketmine\command\Command;
use pocketmine\command\CommandSender;
use pocketmine\utils\TextFormat;
use function implode;

class HealthTagCommand extends Command
{

    /** @var Main */
    private $plugin;

    public function __construct(Main $plugin)
    {
        parent::__construct("healthtag", "Configure healthtag settings", "/healthtag", ["ht"]);
        $this->setPermission("healthtag.configure");
        $this->plugin = $plugin;
    }

    public function execute(CommandSender $sender, string $commandLabel, array $args): void
    {
        if (!$this->testPermissionSilent($sender)) {
            $sender->sendMessage(TextFormat::RED . "You do not have permission to use this command");
            return;
        }
        $action = $args[0] ?? "";
        if (empty($args)) {
            $sender->sendMessage(TextFormat::RED . "Invalid arguments," . TextFormat::YELLOW . "  use '/healthtag help' for more information.");
            return;
        }
        if ($action === "help") {
            $sender->sendMessage(TextFormat::RED . "/healthtag help >" . TextFormat::YELLOW . " Lists all available commands." . TextFormat::EOL . TextFormat::RED . "/healhtag settype [bar/custom] >" . TextFormat::YELLOW . "  Set's the health format type." . TextFormat::EOL . TextFormat::RED . "/healthtag setcustomformat [format] >" . TextFormat::YELLOW . "  Set's format for custom type. Use {maxhealth} and/or {health}." . TextFormat::EOL . TextFormat::RED . "/healthtag reload >" . TextFormat::YELLOW . "  Reload configuration file without restarting the server.");
        } else if ($action === "settype") {
            if(empty($args[1])) {
                $sender->sendMessage(TextFormat::RED . "/healthtag settype" . TextFormat::YELLOW . " bar/custom");
            } else if ($args[1] === "bar") {
                Main::getInstance()->getConfig()->set("type", "bar");
                Main::getInstance()->getConfig()->save();
                $sender->sendMessage(TextFormat::RED . "Healthtag type has been set to " . TextFormat::YELLOW . $args[1] . TextFormat::RED . ".");
            } else if ($args[1] === "custom") {
                Main::getInstance()->getConfig()->set("type", "custom");
                Main::getInstance()->getConfig()->save();
                $sender->sendMessage(TextFormat::RED . "Healthtag type has been set to " . TextFormat::YELLOW . $args[1] . TextFormat::RED . ".");
            } else {
                $sender->sendMessage(TextFormat::RED . "Invalid type. Available types:" . TextFormat::EOL . TextFormat::YELLOW . "- bar" . TextFormat::EOL . TextFormat::YELLOW . "- custom");
            }
        } else if ($action === "setcustomformat") {
            if (empty($args[1])) {
                $this->setCustomFormat($sender->getServer()->getPlayer($sender->getName()));
            } else {
                array_shift($args);
                Main::getInstance()->getConfig()->set("customformat", implode(" ", $args));
                Main::getInstance()->getConfig()->save();
                $sender->sendMessage(TextFormat::RED . "Successfully changed the custom format for healthtag," . TextFormat::YELLOW . " reload the file to update the changes '/healthtag reload'.");
            }
        } else if ($action === "reload") {
            Main::getInstance()->getConfig()->reload();
            $sender->sendMessage(TextFormat::RED . "Successfully reloaded configuration file.");
        }else{
            $sender->sendMessage(TextFormat::RED . "Invalid arguments," . TextFormat::YELLOW . "  use '/healthtag help' for more information.");
        }
    }

    public function setCustomFormat(Player $sender)
    {
        $form = new CustomForm(function (Player $sender, $data) {
            if ($data != null) {
                Main::getInstance()->getConfig()->set("customformat", implode("", $data));
                Main::getInstance()->getConfig()->save();
                $sender->sendMessage(TextFormat::RED . "Successfully changed the custom format for healthtag," . TextFormat::YELLOW . " reload the file to update the changes '/healthtag reload'.");
            }
        });
        $form->setTitle("HealthTag");
        $form->addInput("Set the format for custom type in the following input. Use {health} or {maxhealth} to show the health.", "E.G {health}HP/{maxhealth}HP", Main::getInstance()->getConfig()->get("customformat"));
        $form->addLabel("Now, to proceed and save your new format proceed by tapping/clicking 'submit' or cancel the process by exiting the UI.");
        $form->sendToPlayer($sender);
    }
}
<?php

declare(strict_types=1);

namespace shelly7w7\HealthTag;

use pocketmine\scheduler\Task;

class TagTask extends Task{

	public function onRun(int $tick) : void{
		foreach(Main::getInstance()->getServer()->getOnlinePlayers() as $player) {
            $player->setNameTagVisible(true);
            if(Main::getInstance()->getConfig()->get("type") === "custom"){
                $player->setScoreTag(str_replace(["{health}", "{maxhealth}"], [$player->getHealth(), $player->getMaxHealth()], Main::getInstance()->getConfig()->getNested("customformat")));
            }else if(Main::getInstance()->getConfig()->get("type") === "bar"){
                $player->setScoreTag(str_repeat("§a|", (int) round($player->getHealth(), 0)).str_repeat("§c|", (int) round($player->getMaxHealth() - $player->getHealth(), 0)));
            }else{
                $player->setScoreTag("Invalid type chosen for healthtag");
            }
        }
	}
}
#|  |  |  /  _] /    || |   |      ||  |  |    |      | /    | /    |
#|  |  | /  [_ |  o  || |   |      ||  |  |    |      ||  o  ||   __|
#|  _  ||    _]|     || |___|_|  |_||  _  |    |_|  |_||     ||  |  |
#|  |  ||   [_ |  _  ||     | |  |  |  |  |      |  |  |  _  ||  |_ |
#|  |  ||     ||  |  ||     | |  |  |  |  |      |  |  |  |  ||     |
#|__|__||_____||__|__||_____| |__|  |__|__|      |__|  |__|__||___,_|                                                                   
# Hello everyone! welcome to the small but worthy configuration of HealthTag.
# Have a suggestion? Open an issue on the github and I'll try my best to add it or fix it as soon as possible!
# It's not confirmed if this plugin supports the forks or spoons of PMMP, It is recommended to use on PocketMine-MP!
# It's also not confirmed if it'll work with any nametag formating plugin, It only works on purechat and on vanilla nametags.
# Use {health} to show the player's health and {maxhealth} to show the player's max health!
# Use '§' for colors.

# Types available: "bar" or "custom".
type: "custom"
# Input the values for the custom type.
customformat: "{health}/{maxhealth}"
# Enjoy the plugin!
